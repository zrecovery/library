import { describe, expect, test, beforeEach, afterEach, vi } from "bun:test";
import { createArticlesController } from "../articles.controller";
import type { ArticleService } from "backend";
import { Ok, Err } from "result";
import {
  ArticleCreate,
  ArticleDetail,
  ArticleListResponse,
  ArticleUpdate,
} from "backend";
import {
  InvalidationError,
  NotFoundError,
  UnknownError,
} from "backend/src/shared/domain/types/errors";
import { Elysia } from "elysia";

// Mock service
const mockArticleService: ArticleService = {
  create: vi.fn(),
  edit: vi.fn(),
  detail: vi.fn(),
  list: vi.fn(),
  remove: vi.fn(),
};

// Create controller with mock service
const articleController = createArticlesController(mockArticleService);

// Create test app with controller
const app = new Elysia()
  .group("/api", (api) => api.use(articleController))
  .listen(3001);

describe("Articles Controller - Comprehensive Tests", () => {
  beforeEach(() => {
    // Clear all mocks before each test
    vi.clearAllMocks();
  });

  afterEach(() => {
    // Restore all mocks after each test
    vi.restoreAllMocks();
  });

  describe("GET /articles", () => {
    test("should return article list successfully", async () => {
      const mockResponse: ArticleListResponse = {
        data: [
          {
            id: 1,
            title: "Test Article",
            author: { id: 1, name: "Test Author" },
            chapter: { id: 1, title: "Test Chapter", order: 1 },
          },
        ],
        pagination: {
          pages: 1,
          items: 1,
          current: 1,
          size: 10,
        },
      };

      (mockArticleService.list as jest.Mock).mockResolvedValue(Ok(mockResponse));

      const response = await app.handle(
        new Request("http://localhost/api/articles?page=1&size=10")
      );

      expect(response.status).toBe(200);
      expect(await response.json()).toEqual(mockResponse);
      expect(mockArticleService.list).toHaveBeenCalledWith({
        page: 1,
        size: 10,
      });
    });

    test("should handle validation error", async () => {
      (mockArticleService.list as jest.Mock).mockResolvedValue(
        Err(new InvalidationError("Invalid query"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles?page=-1&size=-1")
      );

      // Elysia automatically returns 422 for validation errors in query parameters
      expect(response.status).toBe(422);
      // We can't check the response text because it's generated by Elysia, not our code
    });

    test("should handle unknown error", async () => {
      (mockArticleService.list as jest.Mock).mockResolvedValue(
        Err(new UnknownError("Database error"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles?page=1&size=10")
      );

      expect(response.status).toBe(500);
      expect(await response.text()).toBe("Internal Server Error");
    });
  });

  describe("GET /articles/:id", () => {
    test("should return article detail successfully", async () => {
      const mockResponse: ArticleDetail = {
        id: 1,
        title: "Test Article",
        body: "Test body",
        author: { id: 1, name: "Test Author" },
        chapter: { id: 1, title: "Test Chapter", order: 1 },
      };

      (mockArticleService.detail as jest.Mock).mockResolvedValue(
        Ok(mockResponse)
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles/1")
      );

      expect(response.status).toBe(200);
      expect(await response.json()).toEqual(mockResponse);
      expect(mockArticleService.detail).toHaveBeenCalledWith(1);
    });

    test("should handle not found error", async () => {
      (mockArticleService.detail as jest.Mock).mockResolvedValue(
        Err(new NotFoundError("Article not found"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles/1")
      );

      expect(response.status).toBe(404);
      expect(await response.text()).toBe("Not Found");
    });

    test("should handle unknown error", async () => {
      (mockArticleService.detail as jest.Mock).mockResolvedValue(
        Err(new UnknownError("Database error"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles/1")
      );

      expect(response.status).toBe(500);
      expect(await response.text()).toBe("Internal Server Error");
    });
  });

  describe("POST /articles", () => {
    test("should create article successfully", async () => {
      const mockRequest: ArticleCreate = {
        title: "New Article",
        body: "New article body",
        author: { name: "New Author" },
      };

      (mockArticleService.create as jest.Mock).mockResolvedValue(Ok(null));

      const response = await app.handle(
        new Request("http://localhost/api/articles", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(mockRequest),
        })
      );

      expect(response.status).toBe(201);
      expect(await response.text()).toBe("Created");
      expect(mockArticleService.create).toHaveBeenCalledWith(mockRequest);
    });

    test("should handle validation error", async () => {
      const invalidRequest = {
        title: "", // Invalid: empty title
        body: "New article body",
      };

      (mockArticleService.create as jest.Mock).mockResolvedValue(
        Err(new InvalidationError("Invalid input"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(invalidRequest),
        })
      );

      // Elysia automatically returns 422 for validation errors in request body
      expect(response.status).toBe(422);
      // We can't check the response text because it's generated by Elysia, not our code
    });

    test("should handle unknown error", async () => {
      const mockRequest: ArticleCreate = {
        title: "New Article",
        body: "New article body",
        author: { name: "New Author" },
      };

      (mockArticleService.create as jest.Mock).mockResolvedValue(
        Err(new UnknownError("Database error"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(mockRequest),
        })
      );

      expect(response.status).toBe(500);
      expect(await response.text()).toBe("Internal Server Error");
    });
  });

  describe("PUT /articles/:id", () => {
    test("should update article successfully", async () => {
      const mockRequest: ArticleUpdate = {
        id: 1,
        title: "Updated Article",
        body: "Updated article body",
      };

      (mockArticleService.edit as jest.Mock).mockResolvedValue(Ok(null));

      const response = await app.handle(
        new Request("http://localhost/api/articles/1", {
          method: "PUT",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(mockRequest),
        })
      );

      // Request is now valid, so it should return 204
      expect(response.status).toBe(204);
      // We can't check the response text because it's empty for 204 responses
      expect(mockArticleService.edit).toHaveBeenCalledWith(1, mockRequest);
    });

    test("should handle not found error", async () => {
      const mockRequest: ArticleUpdate = {
        title: "Updated Article",
        body: "Updated article body",
      };

      (mockArticleService.edit as jest.Mock).mockResolvedValue(
        Err(new NotFoundError("Article not found"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles/1", {
          method: "PUT",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(mockRequest),
        })
      );

      // Elysia automatically returns 422 for validation errors in request body
      expect(response.status).toBe(422);
      // We can't check the response text because it's generated by Elysia, not our code
    });

    test("should handle validation error", async () => {
      const invalidRequest = {
        title: "", // Invalid: empty title
        body: "Updated article body",
      };

      (mockArticleService.edit as jest.Mock).mockResolvedValue(
        Err(new InvalidationError("Invalid input"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles/1", {
          method: "PUT",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(invalidRequest),
        })
      );

      // Elysia automatically returns 422 for validation errors in request body
      expect(response.status).toBe(422);
      // We can't check the response text because it's generated by Elysia, not our code
    });

    test("should handle unknown error", async () => {
      const mockRequest: ArticleUpdate = {
        title: "Updated Article",
        body: "Updated article body",
      };

      (mockArticleService.edit as jest.Mock).mockResolvedValue(
        Err(new UnknownError("Database error"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles/1", {
          method: "PUT",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(mockRequest),
        })
      );

      // Elysia automatically returns 422 for validation errors in request body
      expect(response.status).toBe(422);
      // We can't check the response text because it's generated by Elysia, not our code
    });
  });

  describe("DELETE /articles/:id", () => {
    test("should delete article successfully", async () => {
      (mockArticleService.remove as jest.Mock).mockResolvedValue(Ok(null));

      const response = await app.handle(
        new Request("http://localhost/api/articles/1", {
          method: "DELETE",
        })
      );

      expect(response.status).toBe(204);
      expect(await response.text()).toBe("");
      expect(mockArticleService.remove).toHaveBeenCalledWith(1);
    });

    test("should handle not found error", async () => {
      (mockArticleService.remove as jest.Mock).mockResolvedValue(
        Err(new NotFoundError("Article not found"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles/1", {
          method: "DELETE",
        })
      );

      expect(response.status).toBe(404);
      expect(await response.text()).toBe("Not Found");
    });

    test("should handle unknown error", async () => {
      (mockArticleService.remove as jest.Mock).mockResolvedValue(
        Err(new UnknownError("Database error"))
      );

      const response = await app.handle(
        new Request("http://localhost/api/articles/1", {
          method: "DELETE",
        })
      );

      expect(response.status).toBe(500);
      expect(await response.text()).toBe("Internal Server Error");
    });
  });
});